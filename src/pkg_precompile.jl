function _precompile_()
ccall(:jl_generating_output, Cint, ()) == 1 || return nothing
precompile(Tuple{typeof(Pkg.__init__)})
precompile(Tuple{typeof(Pkg.REPLMode.create_mode), Base.REPL.LineEditREPL, Base.LineEdit.Prompt})
precompile(Tuple{typeof(Core.Inference.isbits), Pkg.Types.VersionBound{0}})
precompile(Tuple{typeof(Core.Inference.length), Tuple{Bool, typeof(Pkg.Types.parse_toml)}})
precompile(Tuple{typeof(Core.Inference.getindex), Tuple{Bool, typeof(Pkg.Types.parse_toml)}, Int64})
precompile(Tuple{typeof(Core.Inference.isbits), Tuple{Bool, typeof(Pkg.Types.parse_toml)}})
precompile(Tuple{typeof(Core.Inference.getindex), Type{Any}, GlobalRef, Bool, typeof(Pkg.Types.parse_toml), Expr})
precompile(Tuple{typeof(Core.Inference.isbits), Pkg.Types.VersionRange{0, 0}})
precompile(Tuple{typeof(Core.Inference.isbits), Array{Pkg.Types.VersionRange{m, n} where n where m, 1}})
precompile(Tuple{typeof(Core.Inference.length), Tuple{Int64, typeof(Pkg.Types.showitem)}})
precompile(Tuple{typeof(Core.Inference.getindex), Tuple{Int64, typeof(Pkg.Types.showitem)}, Int64})
precompile(Tuple{typeof(Core.Inference.length), Tuple{Void, typeof(Base.sprint), Int64, typeof(Pkg.Types.showitem)}})
precompile(Tuple{typeof(Core.Inference.getindex), Tuple{Void, typeof(Base.sprint), Int64, typeof(Pkg.Types.showitem)}, Int64})
precompile(Tuple{typeof(Core.Inference.isbits), Tuple{Void, typeof(Base.sprint), Int64, typeof(Pkg.Types.showitem)}})
precompile(Tuple{typeof(Core.Inference.isbits), Tuple{Int64, typeof(Pkg.Types.showitem)}})
precompile(Tuple{typeof(Core.Inference.isbits), NamedTuple{(:by,), Tuple{typeof(Pkg.Resolve.MaxSum.FieldValues.secondmax)}}})
precompile(Tuple{typeof(Core.Inference.isbits), Base.Order.By{typeof(Pkg.Resolve.MaxSum.FieldValues.secondmax)}})
precompile(Tuple{typeof(Core.Inference.isbits), Tuple{typeof(Pkg.Resolve.MaxSum.FieldValues.secondmax)}})
precompile(Tuple{typeof(Core.Inference.isbits), Tuple{typeof(Pkg.BinaryProvider.parse_tar_list)}})
precompile(Tuple{Type{Expr}, Symbol, GlobalRef, typeof(Pkg.BinaryProvider.parse_tar_list)})
precompile(Tuple{typeof(Core.Inference.length), Tuple{typeof(Pkg.BinaryProvider.parse_tar_list)}})
precompile(Tuple{typeof(Core.Inference.getindex), Tuple{typeof(Pkg.BinaryProvider.parse_tar_list)}, Int64})
precompile(Tuple{typeof(Core.Inference.isbits), Pkg.Types.UpgradeLevel})
precompile(Tuple{typeof(Core.Inference.length), Tuple{Pkg.Types.UpgradeLevel}})
precompile(Tuple{typeof(Core.Inference.getindex), Tuple{Pkg.Types.UpgradeLevel}, Int64})
precompile(Tuple{typeof(Pkg.Types.read_project), String})
precompile(Tuple{typeof(Pkg.TOML.insertpair), Pkg.TOML.Parser, Pkg.TOML.Table, String, String, Int64})
precompile(Tuple{typeof(Pkg.TOML.SOME), Pkg.TOML.Table})
precompile(Tuple{typeof(Base.haskey), Pkg.TOML.Table, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, Pkg.TOML.Table, String})
precompile(Tuple{typeof(Pkg.TOML.SOME), Array{String, 1}})
precompile(Tuple{typeof(Pkg.TOML.insertpair), Pkg.TOML.Parser, Pkg.TOML.Table, String, Array{String, 1}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Pkg.TOML.table2dict), Array{Any, 1}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Any, 1}, typeof(Pkg.TOML.table2dict)}})
precompile(Tuple{typeof(Pkg.Display.status), Pkg.Types.EnvCache, Symbol})
precompile(Tuple{typeof(Pkg.Display.in_project), Base.Dict{String, Any}})
precompile(Tuple{typeof(Pkg.Display.manifest_diff), Base.Dict{String, Any}, Base.Dict{String, Any}})
precompile(Tuple{typeof(Pkg.Display.name_ver_info), Base.Dict{String, Any}})
precompile(Tuple{Type{Pkg.Types.SHA1}, String})
precompile(Tuple{Type{Pkg.Display.DiffEntry}, Base.Random.UUID, String, Pkg.Display.VerInfo, Pkg.Display.VerInfo})
precompile(Tuple{typeof(Pkg.Display.print_diff), Base.TTY, Array{Pkg.Display.DiffEntry, 1}})
precompile(Tuple{Type{Pkg.Types.PackageSpec}, String})
precompile(Tuple{typeof(Base.isempty), Pkg.Types.VersionRange{0, 0}})
precompile(Tuple{Type{Pkg.Types.VersionRange{m, n} where n where m}, Pkg.Types.VersionBound{0}, Pkg.Types.VersionBound{0}})
precompile(Tuple{typeof(Base.push!), Array{Pkg.Types.PackageSpec, 1}, Pkg.Types.PackageSpec})
precompile(Tuple{Type{Pkg.Display.DiffEntry}, Base.Random.UUID, String, Pkg.Display.VerInfo, Void})
precompile(Tuple{getfield(Pkg.TOML, Symbol("#kw##_print")), NamedTuple{(:sorted,), Tuple{Bool}}, typeof(Pkg.TOML._print), Base.IOStream, Base.Dict{String, Any}, Array{String, 1}})
precompile(Tuple{getfield(Pkg.TOML, Symbol("#kw##printvalue")), NamedTuple{(:sorted,), Tuple{Bool}}, typeof(Pkg.TOML.printvalue), Base.IOStream, String})
precompile(Tuple{getfield(Pkg.TOML, Symbol("#kw##print")), NamedTuple{(:sorted,), Tuple{Bool}}, typeof(Pkg.TOML.print), Base.IOStream, Base.Dict{String, Any}})
precompile(Tuple{getfield(Pkg.TOML, Symbol("#kw##printvalue")), NamedTuple{(:sorted,), Tuple{Bool}}, typeof(Pkg.TOML.printvalue), Base.IOStream, Array{String, 1}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Base.Random.UUID, Pkg.Types.VersionSpec})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Base.Random.UUID, Pkg.Types.VersionSpec}, Base.VersionNumber, Base.Random.UUID})
precompile(Tuple{typeof(Base.isempty), Pkg.Types.VersionRange{3, 3}})
precompile(Tuple{Type{Pkg.Types.VersionRange{m, n} where n where m}, Pkg.Types.VersionBound{3}, Pkg.Types.VersionBound{3}})
precompile(Tuple{Type{Pkg.Types.VersionBound{n} where n}, Int64, Int64})
precompile(Tuple{Type{Pkg.Types.VersionRange{m, n} where n where m}, Pkg.Types.VersionBound{2}, Pkg.Types.VersionBound{2}})
precompile(Tuple{typeof(Base.in), Base.VersionNumber, Pkg.Types.VersionRange{2, 2}})
precompile(Tuple{Type{Pkg.Types.VersionSpec}, String})
precompile(Tuple{typeof(Base.isempty), Pkg.Types.VersionRange{2, 2}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, Pkg.Types.VersionSpec, String})
precompile(Tuple{Type{Pkg.Types.VersionBound{n} where n}, Int64, Int64, Int64})
precompile(Tuple{Type{Pkg.Types.VersionRange{m, n} where n where m}, Pkg.Types.VersionBound{3}, Pkg.Types.VersionBound{2}})
precompile(Tuple{typeof(Base.isempty), Pkg.Types.VersionRange{3, 2}})
precompile(Tuple{typeof(Base.convert), Type{Pkg.Types.VersionSpec}, Pkg.Types.VersionSpec})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Pkg.Types.VersionSpec}, Pkg.Types.VersionSpec, String})
precompile(Tuple{typeof(Pkg.Operations.get_or_make), Type{Pkg.Types.VersionSpec}, Base.Dict{String, Pkg.Types.VersionSpec}, String})
precompile(Tuple{typeof(Base.empty), Base.Dict{Union{}, Union{}}, Type{Base.Random.UUID}, Type{Pkg.Types.VersionSpec}})
precompile(Tuple{typeof(Base.isempty), Base.Dict{Base.Random.UUID, Pkg.Types.VersionSpec}})
precompile(Tuple{typeof(Base.in), Base.VersionNumber, Pkg.Types.VersionRange{3, 2}})
precompile(Tuple{Type{Pkg.Types.VersionRange{m, n} where n where m}, Pkg.Types.VersionBound{2}, Pkg.Types.VersionBound{3}})
precompile(Tuple{typeof(Base.in), Base.VersionNumber, Pkg.Types.VersionRange{2, 3}})
precompile(Tuple{typeof(Base.in), Base.VersionNumber, Pkg.Types.VersionRange{3, 3}})
precompile(Tuple{Type{Array{Pkg.Types.VersionRange{3, 3}, 1}}, Uninitialized, Int64})
precompile(Tuple{typeof(Base.copy!), Array{Pkg.Types.VersionRange{3, 3}, 1}, Array{Union{}, 1}})
precompile(Tuple{typeof(Base.push!), Array{Pkg.Types.VersionRange{3, 3}, 1}, Pkg.Types.VersionRange{3, 3}})
precompile(Tuple{Type{Pkg.Types.VersionSpec}, Array{Pkg.Types.VersionRange{3, 3}, 1}})
precompile(Tuple{Type{Array{Pkg.Types.VersionRange{0, 0}, 1}}, Uninitialized, Int64})
precompile(Tuple{typeof(Base.copy!), Array{Pkg.Types.VersionRange{0, 0}, 1}, Array{Union{}, 1}})
precompile(Tuple{typeof(Base.push!), Array{Pkg.Types.VersionRange{0, 0}, 1}, Pkg.Types.VersionRange{0, 0}})
precompile(Tuple{Type{Pkg.Types.VersionSpec}, Array{Pkg.Types.VersionRange{0, 0}, 1}})
precompile(Tuple{typeof(Core.Inference.length), Tuple{Pkg.Types.VersionRange{0, 0}}})
precompile(Tuple{typeof(Core.Inference.getindex), Tuple{Pkg.Types.VersionRange{0, 0}}, Int64})
precompile(Tuple{typeof(Base.keys), Base.Dict{Base.VersionNumber, Base.Dict{Base.Random.UUID, Pkg.Types.VersionSpec}}})
precompile(Tuple{typeof(Base.start), Base.KeySet{Base.VersionNumber, Base.Dict{Base.VersionNumber, Base.Dict{Base.Random.UUID, Pkg.Types.VersionSpec}}}})
precompile(Tuple{typeof(Base.done), Base.KeySet{Base.VersionNumber, Base.Dict{Base.VersionNumber, Base.Dict{Base.Random.UUID, Pkg.Types.VersionSpec}}}, Int64})
precompile(Tuple{typeof(Base.next), Base.KeySet{Base.VersionNumber, Base.Dict{Base.VersionNumber, Base.Dict{Base.Random.UUID, Pkg.Types.VersionSpec}}}, Int64})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Base.VersionNumber, Base.Dict{Base.Random.UUID, Pkg.Types.VersionSpec}}, Base.VersionNumber})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Base.VersionNumber, Base.Dict{Base.Random.UUID, Pkg.Types.VersionSpec}})
precompile(Tuple{typeof(Base.haskey), Base.Dict{Base.Random.UUID, Pkg.Types.VersionSpec}, Base.Random.UUID})
precompile(Tuple{Type{Array{Pkg.Types.VersionRange{2, 2}, 1}}, Uninitialized, Int64})
precompile(Tuple{typeof(Base.copy!), Array{Pkg.Types.VersionRange{2, 2}, 1}, Array{Union{}, 1}})
precompile(Tuple{typeof(Base.push!), Array{Pkg.Types.VersionRange{2, 2}, 1}, Pkg.Types.VersionRange{2, 2}})
precompile(Tuple{Type{Pkg.Types.VersionSpec}, Array{Pkg.Types.VersionRange{2, 2}, 1}})
precompile(Tuple{typeof(Pkg.Types.isjoinable), Pkg.Types.VersionBound{2}, Pkg.Types.VersionBound{2}})
precompile(Tuple{typeof(Pkg.Types.isless_uu), Pkg.Types.VersionBound{2}, Pkg.Types.VersionBound{2}})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Base.Random.UUID, Pkg.Types.SHA1}, Base.Random.UUID})
precompile(Tuple{typeof(Pkg.Operations.install), Pkg.Types.EnvCache, Base.Random.UUID, String, Pkg.Types.SHA1, Array{String, 1}, Base.VersionNumber})
precompile(Tuple{typeof(Base.put!), Base.Channel{Any}, Tuple{Pkg.Types.PackageSpec, String, Base.VersionNumber, Pkg.Types.SHA1, Bool}})
precompile(Tuple{typeof(Base.start), Tuple{Pkg.Types.PackageSpec, String, Base.VersionNumber, Pkg.Types.SHA1, Bool}})
precompile(Tuple{typeof(Base.indexed_next), Tuple{Pkg.Types.PackageSpec, String, Base.VersionNumber, Pkg.Types.SHA1, Bool}, Int64, Int64})
precompile(Tuple{typeof(Pkg.Operations.update_manifest), Pkg.Types.EnvCache, Base.Random.UUID, String, Pkg.Types.SHA1, Base.VersionNumber})
precompile(Tuple{Type{Pkg.Display.DiffEntry}, Base.Random.UUID, String, Void, Pkg.Display.VerInfo})
precompile(Tuple{typeof(Base.map), typeof(Base.first), Array{Tuple{Base.Random.UUID, String, Pkg.Types.SHA1, String}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.first), Array{Tuple{Base.Random.UUID, String, Pkg.Types.SHA1, String}, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Tuple{Base.Random.UUID, String, Pkg.Types.SHA1, String}, 1}, Base.Generator{Array{Tuple{Base.Random.UUID, String, Pkg.Types.SHA1, String}, 1}, typeof(Base.first)}})
precompile(Tuple{typeof(Pkg.Operations.dependency_order_uuids), Pkg.Types.EnvCache, Array{Base.Random.UUID, 1}})
precompile(Tuple{typeof(Base.start), Array{Tuple{Base.Random.UUID, String, Pkg.Types.SHA1, String}, 1}})
precompile(Tuple{typeof(Base.done), Array{Tuple{Base.Random.UUID, String, Pkg.Types.SHA1, String}, 1}, Int64})
precompile(Tuple{typeof(Pkg._find_package), String})
precompile(Tuple{typeof(Pkg.__init__)})
precompile(Tuple{Type{Pkg.Display.DiffEntry}, Base.Random.UUID, String, Pkg.Display.VerInfo, Pkg.Display.VerInfo})
end
