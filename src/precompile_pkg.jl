function _precompile_()
ccall(:jl_generating_output, Cint, ()) == 1 || return nothing
precompile(Tuple{typeof(Pkg.__init__)})
precompile(Tuple{getfield(Pkg, Symbol("##4#5")), Base.REPL.LineEditREPL})
precompile(Tuple{typeof(Pkg.REPLMode.create_mode), Base.REPL.LineEditREPL, Base.LineEdit.Prompt})
precompile(Tuple{getfield(Base.LineEdit, Symbol("#kw##add_nested_key!")), NamedTuple{(:override,), Tuple{Bool}}, typeof(Base.LineEdit.add_nested_key!), Base.Dict{Char, Any}, Char, getfield(Pkg.REPLMode, Symbol("##5#7")){Base.LineEdit.Prompt}})
precompile(Tuple{getfield(Base.LineEdit, Symbol("##add_nested_key!#22")), Bool, typeof(Base.LineEdit.add_nested_key!), Base.Dict{Char, Any}, Char, getfield(Pkg.REPLMode, Symbol("##5#7")){Base.LineEdit.Prompt}})
precompile(Tuple{typeof(Base.LineEdit.match_input), getfield(Pkg.REPLMode, Symbol("##5#7")){Base.LineEdit.Prompt}, Base.LineEdit.MIState, Base.Terminals.TTYTerminal, Array{Char, 1}, Base.Dict{Char, Any}})
precompile(Tuple{getfield(Base.LineEdit, Symbol("##27#28")){getfield(Pkg.REPLMode, Symbol("##5#7")){Base.LineEdit.Prompt}, String}, Base.LineEdit.MIState, Base.REPL.LineEditREPL})
precompile(Tuple{getfield(Pkg.REPLMode, Symbol("##5#7")){Base.LineEdit.Prompt}, Base.LineEdit.MIState, Base.REPL.LineEditREPL, String})
precompile(Tuple{getfield(Pkg.REPLMode, Symbol("##3#4")){Base.REPL.LineEditREPL, Base.LineEdit.Prompt}, Base.LineEdit.MIState, Base.GenericIOBuffer{Array{UInt8, 1}}, Bool})
precompile(Tuple{typeof(Core.Inference.isbits), Pkg.Types.VersionBound{0}})
precompile(Tuple{typeof(Core.Inference.isbits), NamedTuple{(:by,), Tuple{getfield(Pkg.Display, Symbol("##9#10"))}}})
precompile(Tuple{typeof(Core.Inference.isbits), Base.Order.By{getfield(Pkg.Display, Symbol("##9#10"))}})
precompile(Tuple{typeof(Core.Inference.isbits), Tuple{getfield(Pkg.Display, Symbol("##9#10"))}})
precompile(Tuple{typeof(Core.Inference.length), Tuple{Bool, typeof(Pkg.Types.parse_toml)}})
precompile(Tuple{typeof(Core.Inference.getindex), Tuple{Bool, typeof(Pkg.Types.parse_toml)}, Int64})
precompile(Tuple{typeof(Core.Inference.isbits), Tuple{Bool, typeof(Pkg.Types.parse_toml)}})
precompile(Tuple{typeof(Core.Inference.getindex), Type{Any}, GlobalRef, Bool, typeof(Pkg.Types.parse_toml), Expr})
precompile(Tuple{typeof(Core.Inference.isbits), NamedTuple{(:by,), Tuple{getfield(Pkg.Types, Symbol("##39#41"))}}})
precompile(Tuple{typeof(Core.Inference.isbits), Base.Order.By{getfield(Pkg.Types, Symbol("##39#41"))}})
precompile(Tuple{typeof(Core.Inference.isbits), Tuple{getfield(Pkg.Types, Symbol("##39#41"))}})
precompile(Tuple{typeof(Core.Inference.isbits), Pkg.Types.VersionRange{0, 0}})
precompile(Tuple{typeof(Core.Inference.isbits), Array{Pkg.Types.VersionRange{m, n} where n where m, 1}})
precompile(Tuple{typeof(Core.Inference.length), Tuple{Int64, typeof(Pkg.Types.showitem)}})
precompile(Tuple{typeof(Core.Inference.getindex), Tuple{Int64, typeof(Pkg.Types.showitem)}, Int64})
precompile(Tuple{typeof(Core.Inference.length), Tuple{Void, typeof(Base.sprint), Int64, typeof(Pkg.Types.showitem)}})
precompile(Tuple{typeof(Core.Inference.getindex), Tuple{Void, typeof(Base.sprint), Int64, typeof(Pkg.Types.showitem)}, Int64})
precompile(Tuple{typeof(Core.Inference.isbits), Tuple{Void, typeof(Base.sprint), Int64, typeof(Pkg.Types.showitem)}})
precompile(Tuple{typeof(Core.Inference.isbits), Tuple{Int64, typeof(Pkg.Types.showitem)}})
precompile(Tuple{typeof(Core.Inference.isbits), NamedTuple{(:by,), Tuple{typeof(Pkg.Resolve.MaxSum.FieldValues.secondmax)}}})
precompile(Tuple{typeof(Core.Inference.isbits), Base.Order.By{typeof(Pkg.Resolve.MaxSum.FieldValues.secondmax)}})
precompile(Tuple{typeof(Core.Inference.isbits), Tuple{typeof(Pkg.Resolve.MaxSum.FieldValues.secondmax)}})
precompile(Tuple{typeof(Core.Inference.isbits), Tuple{getfield(Pkg.BinaryProvider, Symbol("##41#62")), getfield(Pkg.BinaryProvider, Symbol("##42#63")), getfield(Pkg.BinaryProvider, Symbol("##43#64")), typeof(Pkg.BinaryProvider.parse_tar_list)}})
precompile(Tuple{typeof(Core.Inference.length), Tuple{getfield(Pkg.BinaryProvider, Symbol("##41#62")), getfield(Pkg.BinaryProvider, Symbol("##42#63")), getfield(Pkg.BinaryProvider, Symbol("##43#64")), typeof(Pkg.BinaryProvider.parse_tar_list)}})
precompile(Tuple{typeof(Core.Inference.getindex), Tuple{getfield(Pkg.BinaryProvider, Symbol("##41#62")), getfield(Pkg.BinaryProvider, Symbol("##42#63")), getfield(Pkg.BinaryProvider, Symbol("##43#64")), typeof(Pkg.BinaryProvider.parse_tar_list)}, Int64})
precompile(Tuple{typeof(Core.Inference.isbits), Tuple{getfield(Pkg.BinaryProvider, Symbol("##42#63")), getfield(Pkg.BinaryProvider, Symbol("##43#64")), typeof(Pkg.BinaryProvider.parse_tar_list)}})
precompile(Tuple{Type{Expr}, Symbol, GlobalRef, getfield(Pkg.BinaryProvider, Symbol("##42#63")), getfield(Pkg.BinaryProvider, Symbol("##43#64")), typeof(Pkg.BinaryProvider.parse_tar_list)})
precompile(Tuple{typeof(Core.Inference.getindex), Type{Any}, GlobalRef, getfield(Pkg.BinaryProvider, Symbol("##41#62")), Expr})
precompile(Tuple{typeof(Core.Inference.length), Tuple{getfield(Pkg.BinaryProvider, Symbol("##42#63")), getfield(Pkg.BinaryProvider, Symbol("##43#64")), typeof(Pkg.BinaryProvider.parse_tar_list)}})
precompile(Tuple{typeof(Core.Inference.getindex), Tuple{getfield(Pkg.BinaryProvider, Symbol("##42#63")), getfield(Pkg.BinaryProvider, Symbol("##43#64")), typeof(Pkg.BinaryProvider.parse_tar_list)}, Int64})
precompile(Tuple{typeof(Core.Inference.isbits), Tuple{getfield(Pkg.BinaryProvider, Symbol("##43#64")), typeof(Pkg.BinaryProvider.parse_tar_list)}})
precompile(Tuple{Type{Expr}, Symbol, GlobalRef, getfield(Pkg.BinaryProvider, Symbol("##43#64")), typeof(Pkg.BinaryProvider.parse_tar_list)})
precompile(Tuple{typeof(Core.Inference.length), Tuple{getfield(Pkg.BinaryProvider, Symbol("##43#64")), typeof(Pkg.BinaryProvider.parse_tar_list)}})
precompile(Tuple{typeof(Core.Inference.getindex), Tuple{getfield(Pkg.BinaryProvider, Symbol("##43#64")), typeof(Pkg.BinaryProvider.parse_tar_list)}, Int64})
precompile(Tuple{typeof(Core.Inference.isbits), Tuple{typeof(Pkg.BinaryProvider.parse_tar_list)}})
precompile(Tuple{Type{Expr}, Symbol, GlobalRef, typeof(Pkg.BinaryProvider.parse_tar_list)})
precompile(Tuple{typeof(Core.Inference.length), Tuple{typeof(Pkg.BinaryProvider.parse_tar_list)}})
precompile(Tuple{typeof(Core.Inference.getindex), Tuple{typeof(Pkg.BinaryProvider.parse_tar_list)}, Int64})
precompile(Tuple{typeof(Core.Inference.length), Tuple{getfield(Pkg.BinaryProvider, Symbol("##43#64"))}})
precompile(Tuple{typeof(Core.Inference.getindex), Tuple{getfield(Pkg.BinaryProvider, Symbol("##43#64"))}, Int64})
precompile(Tuple{typeof(Core.Inference.isbits), Tuple{getfield(Pkg.BinaryProvider, Symbol("##43#64"))}})
precompile(Tuple{typeof(Core.Inference.length), Tuple{getfield(Pkg.BinaryProvider, Symbol("##42#63"))}})
precompile(Tuple{typeof(Core.Inference.getindex), Tuple{getfield(Pkg.BinaryProvider, Symbol("##42#63"))}, Int64})
precompile(Tuple{typeof(Core.Inference.isbits), Tuple{getfield(Pkg.BinaryProvider, Symbol("##42#63"))}})
precompile(Tuple{typeof(Core.Inference.length), Tuple{getfield(Pkg.BinaryProvider, Symbol("##41#62"))}})
precompile(Tuple{typeof(Core.Inference.getindex), Tuple{getfield(Pkg.BinaryProvider, Symbol("##41#62"))}, Int64})
precompile(Tuple{typeof(Core.Inference.isbits), Tuple{getfield(Pkg.BinaryProvider, Symbol("##41#62"))}})
precompile(Tuple{typeof(Core.Inference.isbits), Pkg.Types.UpgradeLevel})
precompile(Tuple{typeof(Core.Inference.length), Tuple{Pkg.Types.UpgradeLevel}})
precompile(Tuple{typeof(Core.Inference.getindex), Tuple{Pkg.Types.UpgradeLevel}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{Base.SubString{String}, 1}, Base.Generator{Base.RegexMatchIterator, getfield(Pkg.REPLMode, Symbol("##1#2"))}, Void})
precompile(Tuple{typeof(Pkg.Types.read_project), String})
precompile(Tuple{typeof(Pkg.TOML.insertpair), Pkg.TOML.Parser, Pkg.TOML.Table, String, String, Int64})
precompile(Tuple{typeof(Pkg.TOML.SOME), Pkg.TOML.Table})
precompile(Tuple{typeof(Base.haskey), Pkg.TOML.Table, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, Pkg.TOML.Table, String})
precompile(Tuple{typeof(Pkg.TOML.SOME), Array{String, 1}})
precompile(Tuple{typeof(Pkg.TOML.insertpair), Pkg.TOML.Parser, Pkg.TOML.Table, String, Array{String, 1}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Pkg.TOML.table2dict), Array{Any, 1}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Any, 1}, typeof(Pkg.TOML.table2dict)}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Pkg.Types, Symbol("##17#18")){Base.Dict{String, Any}}, Array{String, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Array{String, 1}, getfield(Pkg.Types, Symbol("##17#18")){Base.Dict{String, Any}}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, String}, Base.Generator{Array{String, 1}, getfield(Pkg.Types, Symbol("##17#18")){Base.Dict{String, Any}}}, Int64})
precompile(Tuple{typeof(Pkg.Display.status), Pkg.Types.EnvCache, Symbol})
precompile(Tuple{typeof(Pkg.Display.in_project), Base.Dict{String, Any}})
precompile(Tuple{typeof(Pkg.Display.filter_manifest), getfield(Pkg.Display, Symbol("##13#14")){Base.Dict{String, Any}}, Base.Dict{String, Any}})
precompile(Tuple{typeof(Pkg.Display.filter_manifest!), getfield(Pkg.Display, Symbol("##13#14")){Base.Dict{String, Any}}, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.filter!), getfield(Pkg.Display, Symbol("##11#12")){getfield(Pkg.Display, Symbol("##13#14")){Base.Dict{String, Any}}}, Array{Base.Dict{String, Any}, 1}})
precompile(Tuple{getfield(Pkg.Display, Symbol("##13#14")){Base.Dict{String, Any}}, String, Base.Dict{String, Any}})
precompile(Tuple{typeof(Pkg.Display.manifest_diff), Base.Dict{String, Any}, Base.Dict{String, Any}})
precompile(Tuple{typeof(Pkg.Display.name_ver_info), Base.Dict{String, Any}})
precompile(Tuple{Type{Pkg.Types.SHA1}, String})
precompile(Tuple{Type{Pkg.Display.DiffEntry}, Base.Random.UUID, String, Pkg.Display.VerInfo, Pkg.Display.VerInfo})
precompile(Tuple{typeof(Pkg.Display.print_diff), Base.TTY, Array{Pkg.Display.DiffEntry, 1}})
precompile(Tuple{typeof(Pkg.Display.filter_manifest!), getfield(Base, Symbol("##59#60")){getfield(Pkg.Display, Symbol("##13#14")){Base.Dict{String, Any}}}, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.filter!), getfield(Pkg.Display, Symbol("##11#12")){getfield(Base, Symbol("##59#60")){getfield(Pkg.Display, Symbol("##13#14")){Base.Dict{String, Any}}}}, Array{Base.Dict{String, Any}, 1}})
precompile(Tuple{getfield(Base, Symbol("##59#60")){getfield(Pkg.Display, Symbol("##13#14")){Base.Dict{String, Any}}}, String, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.grow_to!), Array{Base.SubString{String}, 1}, Base.Generator{Base.RegexMatchIterator, getfield(Pkg.REPLMode, Symbol("##1#2"))}, Base.RegexMatch})
precompile(Tuple{Type{Pkg.Types.PackageSpec}, String})
precompile(Tuple{getfield(Base, Symbol("##59#60")){typeof(Base.isempty)}, Pkg.Types.VersionRange{0, 0}})
precompile(Tuple{typeof(Base.isempty), Pkg.Types.VersionRange{0, 0}})
precompile(Tuple{Type{Pkg.Types.VersionRange{m, n} where n where m}, Pkg.Types.VersionBound{0}, Pkg.Types.VersionBound{0}})
precompile(Tuple{typeof(Base.push!), Array{Pkg.Types.PackageSpec, 1}, Pkg.Types.PackageSpec})
precompile(Tuple{getfield(Pkg.API, Symbol("##rm#8")), Bool, typeof(Pkg.API.rm), Pkg.Types.EnvCache, Array{Pkg.Types.PackageSpec, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Pkg.Types, Symbol("##31#32")), Base.Dict{String, Any}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Base.Dict{String, Any}, getfield(Pkg.Types, Symbol("##31#32"))}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, String}, Base.Generator{Base.Dict{String, Any}, getfield(Pkg.Types, Symbol("##31#32"))}, Int64})
precompile(Tuple{typeof(Base.filter!), getfield(Pkg.Operations, Symbol("##45#47")){Array{Base.Random.UUID, 1}}, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.filter_in_one_pass!), getfield(Pkg.Operations, Symbol("##45#47")){Array{Base.Random.UUID, 1}}, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.filter_in_one_pass!), getfield(Pkg.Operations, Symbol("##21#25")){Array{Base.Random.UUID, 1}}, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.filter!), getfield(Pkg.Operations, Symbol("##22#26")){Array{Base.Random.UUID, 1}}, Array{Base.Dict{String, Any}, 1}})
precompile(Tuple{Type{Pkg.Display.DiffEntry}, Base.Random.UUID, String, Pkg.Display.VerInfo, Void})
precompile(Tuple{typeof(Base.open), getfield(Pkg.Types, Symbol("##19#24")){Base.Dict{String, Any}}, String, String})
precompile(Tuple{getfield(Pkg.TOML, Symbol("#kw##_print")), NamedTuple{(:sorted,), Tuple{Bool}}, typeof(Pkg.TOML._print), Base.IOStream, Base.Dict{String, Any}, Array{String, 1}})
precompile(Tuple{getfield(Pkg.TOML, Symbol("#kw##printvalue")), NamedTuple{(:sorted,), Tuple{Bool}}, typeof(Pkg.TOML.printvalue), Base.IOStream, String})
precompile(Tuple{typeof(Base.filter!), getfield(Pkg.Types, Symbol("##20#25")), Array{String, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Pkg.Types, Symbol("##21#26")), Array{String, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Array{String, 1}, getfield(Pkg.Types, Symbol("##21#26"))}})
precompile(Tuple{getfield(Pkg.TOML, Symbol("#kw##print")), NamedTuple{(:sorted,), Tuple{Bool}}, typeof(Pkg.TOML.print), Base.IOStream, Base.Dict{String, Any}})
precompile(Tuple{getfield(Pkg.TOML, Symbol("#kw##printvalue")), NamedTuple{(:sorted,), Tuple{Bool}}, typeof(Pkg.TOML.printvalue), Base.IOStream, Array{String, 1}})
precompile(Tuple{typeof(Pkg._find_package), String})
precompile(Tuple{typeof(Pkg.Operations.package_env_info), String})
precompile(Tuple{Type{Pkg.TerminalMenus.RadioMenu}, Array{String, 1}})
precompile(Tuple{typeof(Pkg.TerminalMenus.request), Base.Terminals.TTYTerminal, String, Pkg.TerminalMenus.RadioMenu})
precompile(Tuple{getfield(Pkg.TerminalMenus, Symbol("#kw##printMenu")), NamedTuple{(:init,), Tuple{Bool}}, typeof(Pkg.TerminalMenus.printMenu), Base.TTY, Pkg.TerminalMenus.RadioMenu, Int64})
precompile(Tuple{typeof(Pkg.TerminalMenus.readKey), Base.TTY})
precompile(Tuple{typeof(Pkg.Types.write_env_usage), String})
end
