name: Run tests
on:
  pull_request:
    branches:
      - master
  push:
    branches:
      - master
    tags: '*'
defaults:
  run:
    shell: bash
jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - macOS-latest
          - windows-latest
        julia-arch:
          - 'x64'
          # - 'x86'
        pkg-server:
          - ""
          - "pkg.julialang.org"
        julia-version:
          # - '1.6'
          - 'nightly'
        # exclude:
        #   - os: macOS-latest
        #     julia-arch: x86
    steps:
      - name: Determine filesystem of drives on windows
        if: matrix.os == 'windows-latest'
        run: get-volume
        shell: powershell
      - uses: actions/checkout@v2

      - name: Install Julia from URL (windows)
        if: matrix.os = 'windows-latest'
        uses: julia-actions/install-julia-from-url@main
        with:
          url: https://s3.amazonaws.com/julialangnightlies/assert_pretesting/winnt/x64/1.7/julia-a6df655fea-win64.tar.gz
      - name: Install Julia from URL (ubuntu)
        if: matrix.os = 'ubuntu-latest'
        uses: julia-actions/install-julia-from-url@main
        with:
          url: https://s3.amazonaws.com/julialangnightlies/assert_pretesting/linux/x64/1.7/julia-6492b7b217-linux64.tar.gz
      - name: Install Julia from URL (macos)
        if: matrix.os = 'macOS-latest'
        uses: julia-actions/install-julia-from-url@main
        with:
          url: https://s3.amazonaws.com/julialangnightlies/assert_pretesting/mac/x64/1.7/julia-6492b7b217-mac64.tar.gz

      - name: Show versioninfo()
        run: julia -e "using InteractiveUtils; versioninfo()"

      - name: Fix TEMP on windows
        if: matrix.os == 'windows-latest'
        run: |
          # See https://github.com/actions/virtual-environments/issues/712
          echo "TMP=${USERPROFILE}\AppData\Local\Temp" >> ${GITHUB_ENV}
          echo "TEMP=${USERPROFILE}\AppData\Local\Temp" >> ${GITHUB_ENV}
      - name: Prepare local Pkg for tests
        run: |
          julia test/pkg-uuid.jl
          julia --project --color=yes -e 'write("Project.toml", replace(read("Project.toml", String), r"uuid = .*?\n" =>"uuid = \"44cfe95a-1eb2-52ea-b672-e2afdf69b79f\"\n"));'
      - name: Run tests
        run: julia --project --color=yes --check-bounds=yes -e 'import Pkg; Pkg.build(); Pkg.test(; coverage=true)'
        env:
          JULIA_PKG_SERVER: ${{ matrix.pkg-server }}
      - uses: julia-actions/julia-processcoverage@v1
      - uses: codecov/codecov-action@v1
        with:
          file: lcov.info
  docs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1.0.0
      - uses: julia-actions/setup-julia@latest
        with:
          # version: '1.6'
          version: 'nightly'
      - name: Generate docs
        run: |
          julia --color=yes -e 'write("Project.toml", replace(read("Project.toml", String), r"uuid = .*?\n" =>"uuid = \"44cfe95a-1eb2-52ea-b672-e2afdf69b79f\"\n"))'
          julia --project --color=yes -e 'using Pkg; Pkg.activate("docs"); Pkg.instantiate(); Pkg.develop(PackageSpec(path = pwd()))'
          julia --project=docs --color=yes docs/make.jl pdf
        env:
          DOCUMENTER_KEY: ${{ secrets.DOCUMENTER_KEY }}
